# SPDX-FileCopyrightText: 2023 Klar√§lvdalens Datakonsult AB, a KDAB Group company <info@kdab.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches:
      - master
      - kdchart-3.0
  pull_request:
    branches:
      - master
      - kdchart-3.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-22.04
          #- windows-2022
          #- macos-12

        build_type:
          #- Debug
          - Release

        link_type:
          - shared
          #- static

        config:
          - qt_version: "5.15"
          - qt_version: "6.3.*"

        include:
          - os: ubuntu-22.04
            build_type: Release
            link_type: shared
            config:
              qt_version: "6.6.0"
              apt_pgks:
                - llvm
              pip_pgks:
                - shiboken6-generator==6.6.0 pyside6==6.6.0

    steps:
      - name: Install Qt with options and default aqtversion
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: null # use whatever the default is
          version: ${{ matrix.config.qt_version }}
          cache: true

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install dependencies on Ubuntu (${{ join(matrix.config.apt_pgks, ' ') }})
        if: ${{ runner.os == 'Linux' && matrix.config.apt_pgks }}
        run: |
          sudo apt update -qq
          echo ${{ join(matrix.config.apt_pgks, ' ') }} | xargs sudo apt install -y

      - name: Install Python dependencies (${{ join(matrix.config.pip_pgks, ' ') }})
        if: ${{ matrix.config.pip_pgks }}
        run: echo ${{ join(matrix.config.pip_pgks, ' ') }} | xargs pip install

      - name: Hackery due Shiboken hardcoded paths
        if: ${{ matrix.config.pip_pgks }}
        run: |
          sudo mkdir -p /opt/rh/gcc-toolset-10/root/usr/bin/
          sudo cp /usr/bin/g++-10 /opt/rh/gcc-toolset-10/root/usr/bin/c++
          sudo mkdir -p /opt/rh/gcc-toolset-10/root/usr/lib/gcc/x86_64-linux-gnu/10/
          sudo cp /usr/lib/gcc/x86_64-linux-gnu/10/cc1plus /opt/rh/gcc-toolset-10/root/usr/lib/gcc/x86_64-linux-gnu/10/

      - name: Install ninja-build tool (must be after Qt due PATH changes)
        uses: turtlesec-no/get-ninja@main

      - name: Make sure MSVC is found when Ninja generator is in use
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure project
        run: >
          cmake -S . -B ./build -G Ninja
          --warn-uninitialized -Werror=dev
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DKDChart_QT6=${{ startsWith(matrix.config.qt_version, '6.') }}
          -DKDChart_STATIC=${{ matrix.link_type == 'static' }}
          -DKDChart_TESTS=${{ matrix.build_type == 'Debug' }}
          -DKDChart_EXAMPLES=${{ matrix.build_type == 'Debug' }}
          -DKDChart_DOCS=${{ matrix.build_type == 'Debug' && runner.os == 'Linux' }}
          -DKDChart_PYTHON_BINDINGS=${{ matrix.config.pip_pgks }}
          -DPython3_FIND_VIRTUALENV=ONLY

      - name: Build Project
        run: cmake --build ./build

      - name: Run tests on Linux (offscreen)
        if: ${{ matrix.build_type == 'Debug' && runner.os == 'Linux' }}
        run: ctest --test-dir ./build -C ${{ matrix.build_type }} --output-on-failure
        env:
          QT_QPA_PLATFORM: offscreen

      - name: Run tests on Windown/macOS
        if: ${{ matrix.build_type == 'Debug' && runner.os != 'Linux' }}
        run: ctest --test-dir ./build -C ${{ matrix.build_type }} --output-on-failure

      - name: Read tests log when it fails
        uses: andstor/file-reader-action@v1
        if: ${{ failure() && matrix.build_type == 'Debug' }}
        with:
          path: "./build/Testing/Temporary/LastTest.log"
