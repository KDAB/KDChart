include( variables.pri )

CONFIG += ordered

TEMPLATE=subdirs
SUBDIRS = src include/KDChart.pro

!win32:SUBDIRS += uitools plugins
win32 {
    CONFIG(debug, debug|release) {
        designer_plugins_in_debug {
            SUBDIRS += uitools plugins
        } else {
            message( "Disabling designer plugins. Pass -release to re-enable them, or -designer-plugins-in-debug" )
        }
    } else {
        SUBDIRS += uitools plugins
    }
}

contains($$list($$[QT_VERSION]), 4.[2-9].*) { SUBDIRS += kdchartserializer }

SUBDIRS += examples

unittests: SUBDIRS +=qtests
SUBDIRS +=tests


VERSION  = 2.5.0

MAJOR_VERSION = 2

QT_VERSION=$$[QT_VERSION]
isEmpty(QT_VERSION) {
    error("ERROR: qmake from Qt3 detected. Please use qmake from Qt4!")
}


unix:DEFAULT_INSTALL_PREFIX = /usr/local/KDAB/KDChart-$$VERSION
win32:DEFAULT_INSTALL_PREFIX = "C:\\KDAB\\KDChart"-$$VERSION


# for backw. compat. we still allow manual invocation of qmake using PREFIX:
isEmpty( KDCHART_INSTALL_PREFIX ): KDCHART_INSTALL_PREFIX=$$PREFIX

# if still empty we use the default:
isEmpty( KDCHART_INSTALL_PREFIX ): KDCHART_INSTALL_PREFIX=$$DEFAULT_INSTALL_PREFIX

# if the default was either set by configure or set by the line above:
equals( KDCHART_INSTALL_PREFIX, $$DEFAULT_INSTALL_PREFIX ){
    INSTALL_PREFIX=$$DEFAULT_INSTALL_PREFIX
    unix:message( "No install prefix given, using default of" $$DEFAULT_INSTALL_PREFIX (use configure.sh -prefix DIR to specify))
    !unix:message( "No install prefix given, using default of" $$DEFAULT_INSTALL_PREFIX (use configure -prefix DIR to specify))
} else {
    INSTALL_PREFIX=\"$$KDCHART_INSTALL_PREFIX\"
}

DEBUG_SUFFIX=""
VERSION_SUFFIX=""
CONFIG(debug, debug|release) {
  !unix: DEBUG_SUFFIX = d
}
!unix:!mac:!static:VERSION_SUFFIX=$$MAJOR_VERSION

KDCHARTLIB = kdchart$$DEBUG_SUFFIX$$VERSION_SUFFIX
TESTTOOLSLIB = testtools$$VERSION_SUFFIX
KDCHARTSERIALIZERLIB = kdchartserializer$$DEBUG_SUFFIX$$VERSION_SUFFIX
KDCHARTUITOOLSLIB = kdchartuitools$$DEBUG_SUFFIX$$VERSION_SUFFIX
KDCHARTPLUGINLIBLIB = kdchartpluginlib$$DEBUG_SUFFIX$$VERSION_SUFFIX

message(Install prefix is $$INSTALL_PREFIX)
message(This is KD Chart version $$VERSION)

# These files are in the build directory (Because "somecommand >> somefile" puts them there)
CONFQMAKE_CACHE = "$${OUT_PWD}/.confqmake.cache"
QMAKE_CACHE = "$${OUT_PWD}/.qmake.cache"

# make a newline in case .qmake.cache exists and does not end with one
# (an existing cache file is replacd by the one created by the configure script)
unix:MESSAGE = '\\'$$LITERAL_HASH' KDAB qmake cache file: following lines autogenerated during qmake run'
!unix:MESSAGE = $$LITERAL_HASH' KDAB qmake cache file: following lines autogenerated during qmake run'
exists( $${CONFQMAKE_CACHE} ) {
    unix:system('cp $${CONFQMAKE_CACHE} $${QMAKE_CACHE}')
    !unix:system('copy \"$${CONFQMAKE_CACHE}\" \"$${QMAKE_CACHE}\"')
	message( $${CONFQMAKE_CACHE} )
	message( $${QMAKE_CACHE} )
}
system('echo $${MESSAGE} >> $${QMAKE_CACHE}')
# store PREFIX:
TPD = $${OUT_PWD}
#!unix{
	#TPD=$$replace( TPD, "/", "\\\" )
#}
unix:system('echo TOP_SOURCE_DIR=$${IN_PWD} >> $${QMAKE_CACHE}')
system('echo TOP_BUILD_DIR=$${TPD} >> $${QMAKE_CACHE}')
windows:INSTALL_PREFIX=$$replace(INSTALL_PREFIX, \\\\, /)
system('echo INSTALL_PREFIX=$$INSTALL_PREFIX >> $${QMAKE_CACHE}')
system('echo VERSION=$$VERSION >> $${QMAKE_CACHE}')
system('echo KDCHARTLIB=$$KDCHARTLIB >> $${QMAKE_CACHE}')
system('echo TESTTOOLSLIB=$$TESTTOOLSLIB >> $${QMAKE_CACHE}')
system('echo KDCHARTSERIALIZERLIB=$$KDCHARTSERIALIZERLIB >> $${QMAKE_CACHE}')
system('echo KDCHARTUITOOLSLIB=$$KDCHARTUITOOLSLIB >> $${QMAKE_CACHE}')
system('echo KDCHARTPLUGINLIBLIB=$$KDCHARTPLUGINLIBLIB >> $${QMAKE_CACHE}')

# install license(s):
exists( LICENSE.txt ):     licenses.files  = LICENSE.txt
exists( LICENSE.US.txt ):  licenses.files += LICENSE.US.txt
exists( LICENSE.GPL.txt ): licenses.files += LICENSE.GPL.txt
licenses.path = $$INSTALL_PREFIX
INSTALLS += licenses

exists( README.txt ) {
    readme.files = README.txt
    readme.path = $$INSTALL_PREFIX
    INSTALLS += readme
}

# forward make test calls to qtests:
test.target=test
test.commands=(cd qtests && $(MAKE) test)
test.depends = $(TARGET)
QMAKE_EXTRA_TARGETS += test

